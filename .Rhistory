component_db <- db_2[,c("Available_space_n", "Overall_privacy_n","Furnishings_n","Temperature_n","Humidity_n","Air_movement_n","Dress_code_n",
"Stuffiness_n","Odors_n","Electric_light_n","Natural_light_n","Glare_n","Views_from_windows_n","Noise_level_n","Sound_privacy_n",
"Personal_control_n","Cleanliness_n","Overall_environment_n")]
component_db <- na.omit(component_db)
library(corrplot)
library(corrgram)
library(RColorBrewer)
library(Hmisc)
Corr_db <- rcorr(component_db$Overall_environment_n,component_db$Cleanliness_n, type="pearson")
M <- cor(component_db)
head(round(M,2))
cor_5 <- rcorr(as.matrix(component_db))
M2 <- cor_5$r # Extract correlation coefficient
M3 <- 1-M2    # Set criterial for correlation coefficient cut-off (p.mat and sig.level function)
p_mat<- cor_5$P # set cut off based on p-value
# Check detail in https://rpubs.com/melike/corrplot or
# https://rstudio-pubs-static.s3.amazonaws.com/240657_5157ff98e8204c358b2118fa69162e18.html
corrplot(M, method="color",
type = "upper", outline = T, addgrid.col = "gray50", # formatting the grid
order="FPC",addrect = 4, rect.col = "black",
# order = the order of the columns.
# If not specified it is plotted as in the original matrix, but sometimes it is not so informative.
# Possible methods are: "AOE" (angular order of the eigenvectors), "FPC" (first principal component), "hclust", "alphabet".
# There is also hclust.method to determine the agglomeration method if the order is "hclust".
rect.lwd = 10, cl.pos = "r",               # Legend location
tl.col = "indianred4", tl.cex = 1,         # Axis text
addCoef.col = "white", number.digits = 2,number.cex = 0.75, # Correlation number
col = colorRampPalette(c("darkred","white","midnightblue"))(100),
p.mat = M3, sig.level = 0.5, insig = "blank", # Leave blank on no significant coefficient
cl.lim = c(0,1), cl.ratio = .2, cl.align = "l",  # Control legend details
diag = FALSE) # Hide principal diagonal
corrplot(M, method="color",
type = "upper", outline = T, addgrid.col = "gray50", # formatting the grid
order="FPC",addrect = 4, rect.col = "black",
# order = the order of the columns.
# If not specified it is plotted as in the original matrix, but sometimes it is not so informative.
# Possible methods are: "AOE" (angular order of the eigenvectors), "FPC" (first principal component), "hclust", "alphabet".
# There is also hclust.method to determine the agglomeration method if the order is "hclust".
rect.lwd = 10, cl.pos = "r",               # Legend location
tl.col = "indianred4", tl.cex = 1,         # Axis text
addCoef.col = "white", number.digits = 2,number.cex = 0.75, # Correlation number
col = colorRampPalette(c("darkred","white","midnightblue"))(100),
# p.mat = M3, sig.level = 0.5,
insig = "blank", # Leave blank on no significant coefficient
cl.lim = c(0,1), cl.ratio = .2, cl.align = "l",  # Control legend details
diag = FALSE) # Hide principal diagonal
Corr_db
M
require(Rcpp)
library(plyr)
library(dplyr)
library(tidyr)
library(psych)
library(ggplot2)
# library(directlabels)
library(splines)
library(MASS)
library(grid)
library(scales)
library(aod)
library(rpart)
library(reshape)
# library(reshape2)
library(coin)
library(lme4)
library(GGally)
library(ggthemes)
library(comf)
library(effsize)
library(kernlab)
library(mgcv)
# library(caret)
library(gridExtra)
library(Metrics)
# library(hydroGOF)
# library(caret)
# library(kernlab)
library(mgcv)
library(stratification)
library(Matching)
# Overall satisfaction graphs in different category
subset_id <- c("Available_space", "Overall_privacy","Furnishings","Temperature","Humidity","Air_movement","Dress_code",
"Stuffiness","Odors","Electric_light","Natural_light","Glare","Views_from_windows","Noise_level","Sound_privacy",
"Overall_environment","Personal_control","Cleanliness","Life_satisfaction_score")
satisfaction_db <- db_1[,subset_id]
colnames(satisfaction_db) <- c("Available space", "Overall privacy","Furnishings","Temperature","Humidity","Air movement","Dress code",
"Stuffiness","Odors","Electric light","Natural light","Glare","Views from windows","Noise level","Sound privacy",
"Overall environment","Personal control","Cleanliness","Life satisfaction score")
sat_melt_db <- melt(satisfaction_db, id=c("Life satisfaction score"))
sat_melt_db <- subset(sat_melt_db, subset = value != "")
sat_melt_db <- subset(sat_melt_db, subset = value != "NA")
sat_melt_db <- transform(sat_melt_db,
satisfaction.ord = factor(
value, levels=c("Very satisfied","Satisfied","Somewhat satisfied","Neither satisfied nor dissatisfied",
"Somewhat dissatisfied","Dissatisfied","Very dissatisfied"), ordered=TRUE),
dis.order=factor(
variable, levels=c("Sound privacy","Personal control","Temperature", "Air movement","Overall privacy",
"Noise level","Stuffiness","Glare","Furnishings","Odors","Views from windows",
"Available space","Humidity","Natural light","Overall environment",
"Cleanliness","Electric light","Dress code"), ordered=TRUE))
c <- nrow(sat_melt_db)
sat_melt_numeric <- matrix(NA,c,1)
for (i in 1:c) {
if (sat_melt_db[i,"satisfaction.ord"] == "Very satisfied") {sat_melt_numeric[i] <- 3}
else if (sat_melt_db[i,"satisfaction.ord"] == "Satisfied") {sat_melt_numeric[i] <- 2}
else if (sat_melt_db[i,"satisfaction.ord"] == "Somewhat satisfied") {sat_melt_numeric[i] <- 1}
else if (sat_melt_db[i,"satisfaction.ord"] == "Neither satisfied nor dissatisfied") {sat_melt_numeric[i] <- 0}
else if (sat_melt_db[i,"satisfaction.ord"] == "Somewhat dissatisfied") {sat_melt_numeric[i] <- -1}
else if (sat_melt_db[i,"satisfaction.ord"] == "Dissatisfied") {sat_melt_numeric[i] <- -2}
else if (sat_melt_db[i,"satisfaction.ord"] == "Very dissatisfied") {sat_melt_numeric[i] <- -3}
}
sat_melt_db_1 <- cbind(sat_melt_db, sat_melt_numeric)
group.colors <- c("Very satisfied" = "#238b45", "Satisfied" = "#74c476", "Somewhat satisfied"="#bae4b3",  #forestgreen,seagreen4,darkolivegreen3, khaki2, aafca8
"Neither satisfied nor dissatisfied"="snow2", "Somewhat dissatisfied"="pink3",
"Dissatisfied"="tomato3","Very dissatisfied"="red4")
p1 <- ggplot(sat_melt_db_1, aes(x=dis.order)) + geom_bar(aes(fill=satisfaction.ord), position="fill",colour="NA", size =0, alpha=0.75) +
scale_fill_manual(values=group.colors) + xlab("")+ ylab("Distribution of votes")+ coord_flip()+
ggtitle(paste0("     How satisfied are you with the workstation's ..."))+
# scale_y_continuous(limits=c(0,1.35),breaks=c(0,0.2,0.4,0.6,0.8,1))+
scale_y_continuous(limits=c(0,1.05),breaks=c(0,0.2,0.4,0.6,0.8,1))+
geom_abline(intercept = 0.2, slope = 0, colour = "grey60", linetype = "dashed", size=1) +
theme(axis.text.y=element_text(size=8, colour="black"),
axis.text.x=element_text(size=8, hjust=0.6, colour="black"),
panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
panel.background=element_rect(fill='white',colour='white'),
plot.title = element_text(size = 10, face = "bold"),
legend.text=element_text(size=8),
legend.position='right'); p1
subset_id <- c("Temperature","Odors","Electric_light","Sound_privacy","Overall_environment","Life_satisfaction_score")
satisfaction_db <- db_1[,subset_id]
colnames(satisfaction_db) <- c("Temperature","Odors","Electric light","Sound privacy","Overall environment","Life satisfaction score")
sat_melt_db <- melt(satisfaction_db, id=c("Life satisfaction score"))
sat_melt_db <- subset(sat_melt_db, subset = value != "")
sat_melt_db <- subset(sat_melt_db, subset = value != "NA")
sat_melt_db <- transform(sat_melt_db,
satisfaction.ord = factor(
value, levels=c("Very satisfied","Satisfied","Somewhat satisfied","Neither satisfied nor dissatisfied",
"Somewhat dissatisfied","Dissatisfied","Very dissatisfied"), ordered=TRUE),
dis.order=factor(
variable, levels=c("Sound privacy","Temperature",
"Odors","Overall environment","Electric light"), ordered=TRUE))
c <- nrow(sat_melt_db)
sat_melt_numeric <- matrix(NA,c,1)
for (i in 1:c) {
if (sat_melt_db[i,"satisfaction.ord"] == "Very satisfied") {sat_melt_numeric[i] <- 3}
else if (sat_melt_db[i,"satisfaction.ord"] == "Satisfied") {sat_melt_numeric[i] <- 2}
else if (sat_melt_db[i,"satisfaction.ord"] == "Somewhat satisfied") {sat_melt_numeric[i] <- 1}
else if (sat_melt_db[i,"satisfaction.ord"] == "Neither satisfied nor dissatisfied") {sat_melt_numeric[i] <- 0}
else if (sat_melt_db[i,"satisfaction.ord"] == "Somewhat dissatisfied") {sat_melt_numeric[i] <- -1}
else if (sat_melt_db[i,"satisfaction.ord"] == "Dissatisfied") {sat_melt_numeric[i] <- -2}
else if (sat_melt_db[i,"satisfaction.ord"] == "Very dissatisfied") {sat_melt_numeric[i] <- -3}
}
sat_melt_db_1 <- cbind(sat_melt_db, sat_melt_numeric)
group.colors <- c("Very satisfied" = "#238b45", "Satisfied" = "#74c476", "Somewhat satisfied"="#bae4b3",  #forestgreen,seagreen4,darkolivegreen3, khaki2, aafca8
"Neither satisfied nor dissatisfied"="snow2", "Somewhat dissatisfied"="pink3",
"Dissatisfied"="tomato3","Very dissatisfied"="red4")
p1 <- ggplot(sat_melt_db_1, aes(x=dis.order)) + geom_bar(aes(fill=satisfaction.ord), position="fill",colour="NA", size =0, alpha=0.75) +
scale_fill_manual(values=group.colors) + xlab("")+ ylab("Distribution of votes")+ coord_flip()+
ggtitle(paste0("     How satisfied are you with the workstation's ..."))+
# scale_y_continuous(limits=c(0,1.35),breaks=c(0,0.2,0.4,0.6,0.8,1))+
scale_y_continuous(limits=c(0,1.05),breaks=c(0,0.2,0.4,0.6,0.8,1))+
geom_abline(intercept = 0.2, slope = 0, colour = "grey60", linetype = "dashed", size=1) +
theme(axis.text.y=element_text(size=8, colour="black"),
axis.text.x=element_text(size=8, hjust=0.6, colour="black"),
panel.grid.major=element_blank(), panel.grid.minor=element_blank(),
panel.background=element_rect(fill='white',colour='white'),
plot.title = element_text(size = 10, face = "bold"),
legend.text=element_text(size=8),
legend.position='right'); p1
# db_raw <- read.csv("C:/Users/sbbtcg/Dropbox/2017-Toby Cheung/Research projects/Singapore Building Survey Project/Data Analysis (First phrase)/First_phase_survey_results/Combined_POE_results(20181128).csv")
db_raw <- read.csv("C:/Users/user/Dropbox/2017-Toby Cheung/Research projects/Singapore Building Survey Project/Data Analysis (First phrase)/First_phase_survey_results/Combined_POE_results(20181128).csv")
library(plyr)
library(dplyr)
library(psych)
library(ggplot2)
require(Rcpp)
library(plyr)
library(dplyr)
library(psych)
library(ggplot2)
library(directlabels)
library(splines)
library(MASS)
library(grid)
library(scales)
library(aod)
library(rpart)
library(reshape)
library(reshape2)
library(coin)
library(lme4)
library(GGally)
library(ggthemes)
library(comf)
library(effsize)
library(kernlab)
library(mgcv)
library(caret)
library(gridExtra)
# library(rocc)
# library(LogicReg)
# --------------------------------------------------------------------------------------------------------------------
# ------------------ Attempt for new model, Acc-sensation model ------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------
setwd("D:/Toby Doc/Document/Research/BEARS/TSV-ACC paper")
getwd()
dir()
db_new <- read.csv("DatabaseI&II_20180703.csv")
colnames(db_new) <- c("Publication","Contributor","Year","season","Koppen_org","Climate","climate","city","Country","Building","Ventilation","Mix.operation","Heat.mode",
"Age","Sex","TSV","Acc","Preference","vel_acc","vel_pref",
"Comfort","PMV","PPD","SET","Clo","Met","act10","act20","act30","act40",
"Ta","TAAV_F","Ta_h","Ta_h_F","Ta_m","Ta_m_F","Ta_l","Ta_l_F",
"Top","TOP_F","Tr","TRAV_F","TGO","TGO_F","Tg_h","Tg_h_F","Tg_m","Tg_m_F","Tg_l","Tg_l_F",
"Rh","rh_pref","rh_sen","V","VELAV_FPM","v_h","v_h_fpm","v_m","v_m_fpm","v_l","v_l_fpm","Height","Weight",
"PCEC1","PCEC2","PCEC3","PCEC4","PCEC5","To","prev_ta_F","Database")
columns<-c("Database","Contributor","Country","Building","Ventilation","Koppen_org","Climate","TSV","Acc","Age","Sex","Ta","Tr","V","Rh","Clo","Met",
"Top","To","SET","PMV","PPD")
db_cor <- data.frame(db_new[,columns])
# This is used for consistent the value variable style in number (easy for calculation)
db_cor $TSV <- as.numeric(as.character(db_cor $TSV))
db_cor $Acc <- as.numeric(as.character(db_cor $Acc))
db_cor $Country <- as.factor(as.character(db_cor $Country))
db_cor $Contributor <- as.factor(as.character(db_cor $Contributor))
db_cor $Ta <- as.numeric(as.character(db_cor $Ta))
db_cor $Tr <- as.numeric(as.character(db_cor $Tr))
db_cor $V <- as.numeric(as.character(db_cor $V))
db_cor $Rh <- as.numeric(as.character(db_cor $Rh))
db_cor $Clo <- as.numeric(as.character(db_cor $Clo))
db_cor $Met <- as.numeric(as.character(db_cor $Met))
db_cor $Top <- as.numeric(as.character(db_cor $Top))
db_cor $To <- as.numeric(as.character(db_cor $To))
db_cor $SET <- as.numeric(as.character(db_cor $SET))
db_cor $PMV <- as.numeric(as.character(db_cor $PMV))
db_cor $PPD <- as.numeric(as.character(db_cor $PPD))
db_cor $Age <- as.factor(as.character(db_cor $Age))
db_cor $Sex <- as.factor(as.character(db_cor $Sex))
db_cor $Climate <- as.factor(as.character(db_cor $Climate))
db_cor $Koppen_org <- as.factor(as.character(db_cor $Koppen_org))
db_cor <- subset(db_cor, subset = TSV != "NA")
db_cor <- subset(db_cor, subset = Acc != "NA")
c <- nrow(db_cor) # Clean up the TSV value, some of them are between 1 and 2, e.g. 1.25
cTSV <- matrix(NA,c,1)
cPMV <- matrix(NA,c,1)
Sensation <- matrix(NA,c,1)
PMV_sen <- matrix(NA,c,1)
Acc_sen <- matrix(NA,c,1)
for (i in 1:c) {
if (db_cor$TSV[i] < -2.5){
cTSV[i] <- -3
Sensation[i] <- c("Cold")
}
else if (db_cor$TSV[i] < -1.5){
cTSV[i] <- -2
Sensation[i] <- c("Cool")
}
else if (db_cor$TSV[i] < -0.5){
cTSV[i] <- -1
Sensation[i] <- c("S_cool")
}
else if (db_cor$TSV[i] <= 0.5){
cTSV[i] <- 0
Sensation[i] <- c("Neutral")
}
else if (db_cor$TSV[i] <= 1.5){
cTSV[i] <- 1
Sensation[i] <- c("S_warm")
}
else if (db_cor$TSV[i] <= 2.5){
cTSV[i] <- 2
Sensation[i] <- c("Warm")
}
else if (db_cor$TSV[i] > 2.5){
cTSV[i] <- 3
Sensation[i] <- c("Hot")
}
}
for (i in 1:c) {
if (db_cor$Acc[i] < 0.5){
if (db_cor$TSV[i] < -1.5) {
Acc_sen[i] <- c("Unacc_cool")
}
else if (db_cor$TSV[i]  <= 1.5){
Acc_sen[i] <- c("Unacc_neu")
}
else if (db_cor$TSV[i]  > 1.5){
Acc_sen[i] <- c("Unacc_warm")
}
}
else if (db_cor$Acc[i]  > 0.5){
if (db_cor$TSV[i]  < -1.5) {
Acc_sen[i] <- c("Acc_cool")
}
else if (db_cor$TSV[i]  <= 1.5){
Acc_sen[i] <- c("Acc_neu")
}
else if (db_cor$TSV[i]  > 1.5){
Acc_sen[i] <- c("Acc_warm")
}
}
print(i)
}
db_1 <- cbind(db_cor,cTSV,Sensation,Acc_sen)
db_1 $cTSV <- as.numeric(as.character(db_1 $cTSV))
db_1 $Sensation <- as.factor(as.character(db_1 $Sensation))
db_1 $Acc_sen <- as.factor(as.character(db_1 $Acc_sen))
db_cor <- data.frame(db_new[,columns])
# This is used for consistent the value variable style in number (easy for calculation)
db_cor $TSV <- as.numeric(as.character(db_cor $TSV))
db_cor $Acc <- as.numeric(as.character(db_cor $Acc))
db_cor $Country <- as.factor(as.character(db_cor $Country))
db_cor $Contributor <- as.factor(as.character(db_cor $Contributor))
db_cor $Ta <- as.numeric(as.character(db_cor $Ta))
db_cor $Tr <- as.numeric(as.character(db_cor $Tr))
db_cor $V <- as.numeric(as.character(db_cor $V))
db_cor $Rh <- as.numeric(as.character(db_cor $Rh))
db_cor $Clo <- as.numeric(as.character(db_cor $Clo))
db_cor $Met <- as.numeric(as.character(db_cor $Met))
db_cor $Top <- as.numeric(as.character(db_cor $Top))
db_cor $To <- as.numeric(as.character(db_cor $To))
db_cor $SET <- as.numeric(as.character(db_cor $SET))
db_cor $PMV <- as.numeric(as.character(db_cor $PMV))
db_cor $PPD <- as.numeric(as.character(db_cor $PPD))
db_cor $Age <- as.factor(as.character(db_cor $Age))
db_cor $Sex <- as.factor(as.character(db_cor $Sex))
db_cor $Climate <- as.factor(as.character(db_cor $Climate))
db_cor $Koppen_org <- as.factor(as.character(db_cor $Koppen_org))
db_x <- db_cor %>%
filter(Building == "Office") %>%
# filter(Building == "Office"| Building == "Classroom"| Building == "Others") %>%
# filter(Ventilation =="Air Conditioned" | Ventilation =="Naturally Ventilated" | Ventilation =="Mixed Mode")
filter(Ventilation =="Air Conditioned")
db_x <- db_cor %>%
filter(Building == "Office")
db_cor$Ta
db_cor <- data.frame(db_new[,columns])
# This is used for consistent the value variable style in number (easy for calculation)
db_cor $TSV <- as.numeric(as.character(db_cor $TSV))
db_cor $Acc <- as.numeric(as.character(db_cor $Acc))
db_cor $Country <- as.factor(as.character(db_cor $Country))
db_cor $Contributor <- as.factor(as.character(db_cor $Contributor))
db_cor $Ta <- as.numeric(as.character(db_cor $Ta))
db_cor $Tr <- as.numeric(as.character(db_cor $Tr))
db_cor $V <- as.numeric(as.character(db_cor $V))
db_cor $Rh <- as.numeric(as.character(db_cor $Rh))
db_cor $Clo <- as.numeric(as.character(db_cor $Clo))
db_cor $Met <- as.numeric(as.character(db_cor $Met))
db_cor $Top <- as.numeric(as.character(db_cor $Top))
db_cor $To <- as.numeric(as.character(db_cor $To))
db_cor $SET <- as.numeric(as.character(db_cor $SET))
db_cor $PMV <- as.numeric(as.character(db_cor $PMV))
db_cor $PPD <- as.numeric(as.character(db_cor $PPD))
db_cor $Age <- as.factor(as.character(db_cor $Age))
db_cor $Sex <- as.factor(as.character(db_cor $Sex))
db_cor $Climate <- as.factor(as.character(db_cor $Climate))
db_cor $Koppen_org <- as.factor(as.character(db_cor $Koppen_org))
db_cor <- subset(db_cor, subset = Ta != "NA")
db_x <- db_cor %>%
filter(Building == "Office")
quantile(db_x$Ta, probs = c(0.005,0.01,0.05,0.25,0.5,0.75,0.95,0.99,0.995))
db_y <- subset(db_x, subset=Ta>13 & Ta<35)
min(db_y$Ta)
db_y <- subset(db_x, subset=Ta>=13 & Ta<=35)
min(db_y$Ta)
max(db_y$Ta)
db_TSV <- subset(db_new, subset = TSV != "NA")
min(db_x$Ta)
max(db_x$Ta)
quantile(db_y$Ta, probs = c(0.005,0.01,0.05,0.25,0.5,0.75,0.95,0.99,0.995))
getwd()
save(file = "TSV-ACC-model.RData")
save("TSV-ACC-model.RData")
save(db_1, file = "TSV-ACC-model.RData")
load("TSV-ACC-model.RData")
getwd()
setwd()
dir()
load("TSV-ACC-model.RData")
db <- db_1 %>%
filter(Building == "Office") %>%
# filter(Building == "Office"| Building == "Classroom"| Building == "Others") %>%
# filter(Ventilation =="Air Conditioned" | Ventilation =="Naturally Ventilated" | Ventilation =="Mixed Mode")
filter(Ventilation =="Air Conditioned") %>%  #Just try AC office here %>%
# filter(Ventilation =="Naturally Ventilated")#Just try NV office here
# filter(Ventilation =="Mixed Mode")#Just try NV office here
filter(Climate =="A")
require(Rcpp)
library(plyr)
library(dplyr)
library(psych)
library(ggplot2)
library(directlabels)
library(splines)
library(MASS)
library(grid)
library(scales)
library(aod)
library(rpart)
library(reshape)
library(reshape2)
library(coin)
library(lme4)
library(GGally)
library(ggthemes)
library(comf)
library(effsize)
library(kernlab)
library(mgcv)
library(caret)
library(gridExtra)
# library(rocc)
db <- db_1 %>%
filter(Building == "Office") %>%
# filter(Building == "Office"| Building == "Classroom"| Building == "Others") %>%
# filter(Ventilation =="Air Conditioned" | Ventilation =="Naturally Ventilated" | Ventilation =="Mixed Mode")
filter(Ventilation =="Air Conditioned") %>%  #Just try AC office here %>%
# filter(Ventilation =="Naturally Ventilated")#Just try NV office here
# filter(Ventilation =="Mixed Mode")#Just try NV office here
filter(Climate =="A")
db <- subset(db, Acc_sen != "Unacc_neu")
db <- transform(db,
Sensation = factor(
Sensation, levels=c("Cold","Cool","S_cool","Neutral","S_warm","Warm","Hot"), ordered=TRUE),
Acc_sen = factor(
Acc_sen, levels=c("Unacc_cool","Acc_cool","Acc_neu","Acc_warm","Unacc_warm"), ordered=TRUE)
)
acc_sen.colors <- c(Unacc_cool="cornflowerblue", Acc_cool="lightblue1", Unacc_warm="brown", Acc_warm="lightpink", Acc_neu="palegreen")
ggplot(db, aes(Ta, order=Acc_sen))+ geom_bar(aes(fill=Acc_sen),  binwidth=1, position="fill", alpha=0.7) +
# xlim(15,31)+
theme(axis.text.x=element_text(size=7, hjust=0.6, colour="black"), panel.grid.major=element_blank(), panel.grid.minor=element_blank(), panel.background=element_rect(fill='white',colour='black'))+
scale_fill_manual(values=acc_sen.colors) + ggtitle("Actual thermal acceptance-sensation response")
p1 <- ggplot(db, aes(Ta, order=Acc_sen))+ geom_bar(aes(fill=Acc_sen),  binwidth=1, position="fill", alpha=0.7) +
# xlim(15,31)+
theme(axis.text.x=element_text(size=7, hjust=0.6, colour="black"), panel.grid.major=element_blank(), panel.grid.minor=element_blank(), panel.background=element_rect(fill='white',colour='black'))+
scale_fill_manual(values=acc_sen.colors) + ggtitle("Actual thermal acceptance-sensation response")
save.image(file = "TSV-ACC-model-image.RData")
load("TSV-ACC-model-image.RData")
p1
ggplot(db, aes(Ta, order=Acc_sen))+ geom_bar(aes(fill=Acc_sen),  binwidth=1, position="fill", alpha=0.7) +
# xlim(15,31)+
theme(axis.text.x=element_text(size=7, hjust=0.6, colour="black"), panel.grid.major=element_blank(), panel.grid.minor=element_blank(), panel.background=element_rect(fill='white',colour='black'))+
scale_fill_manual(values=acc_sen.colors) + ggtitle("Actual thermal acceptance-sensation response")
save.image(file = "TSV-ACC-model-image.RData")
getwd()
# load("TSV-ACC-model.RData") # Load data only
load("TSV-ACC-model-image.RData") # Load the entire image
require(Rcpp)
library(plyr)
library(dplyr)
library(psych)
library(ggplot2)
library(directlabels)
library(splines)
library(MASS)
library(grid)
library(scales)
library(aod)
library(rpart)
library(reshape)
library(reshape2)
library(coin)
library(lme4)
library(GGally)
library(ggthemes)
library(comf)
library(effsize)
library(kernlab)
library(mgcv)
library(caret)
library(gridExtra)
db <- db_1 %>%
filter(Building == "Office") %>%
# filter(Building == "Office"| Building == "Classroom"| Building == "Others") %>%
# filter(Ventilation =="Air Conditioned" | Ventilation =="Naturally Ventilated" | Ventilation =="Mixed Mode")
filter(Ventilation =="Air Conditioned") %>%  #Just try AC office here %>%
# filter(Ventilation =="Naturally Ventilated")#Just try NV office here
# filter(Ventilation =="Mixed Mode")#Just try NV office here
filter(Climate =="A")
db <- subset(db, Acc_sen != "Unacc_neu")
db <- transform(db,
Sensation = factor(
Sensation, levels=c("Cold","Cool","S_cool","Neutral","S_warm","Warm","Hot"), ordered=TRUE),
Acc_sen = factor(
Acc_sen, levels=c("Unacc_cool","Acc_cool","Acc_neu","Acc_warm","Unacc_warm"), ordered=TRUE)
)
acc_sen.colors <- c(Unacc_cool="cornflowerblue", Acc_cool="lightblue1", Unacc_warm="brown", Acc_warm="lightpink", Acc_neu="palegreen")
p1 <- ggplot(db, aes(Ta, order=Acc_sen))+ geom_bar(aes(fill=Acc_sen),  binwidth=1, position="fill", alpha=0.7) +
# xlim(15,31)+
theme(axis.text.x=element_text(size=7, hjust=0.6, colour="black"), panel.grid.major=element_blank(), panel.grid.minor=element_blank(), panel.background=element_rect(fill='white',colour='black'))+
scale_fill_manual(values=acc_sen.colors) + ggtitle("Actual thermal acceptance-sensation response")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actual Ordinal logistic regression use in paper ----
require(foreign)
require(ggplot2)
require(MASS)
require(Hmisc)
require(reshape2)
require(rms)
model.olr.full <- polr(Acc_sen ~ Ta, data = db,
Hess = TRUE, method = "logistic")
summary(model.olr.full)
db_cor <- subset(db_cor, subset = Ta != "NA")
db_x <- db_cor %>%
filter(Building == "Office")
quantile(db_x$Ta, probs = c(0.005,0.01,0.05,0.25,0.5,0.75,0.95,0.99,0.995))
db_y <- subset(db_x, subset=Ta>=13 & Ta<=35)
quantile(db_y$Ta, probs = c(0.005,0.01,0.05,0.25,0.5,0.75,0.95,0.99,0.995))
db_TSV <- subset(db_new, subset = TSV != "NA")
model.olr.full <- polr(Acc_sen ~ Ta, data = db,
Hess = TRUE, method = "logistic")
summary(model.olr.full)
save.image(file = "TSV-ACC-model-image.RData")
